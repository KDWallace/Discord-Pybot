There are more details further in the textfile for fixing errors. This first part is just a quick guide!



{
    ".test":
        {
            "type": "simple",
            "response": "Hi there!"
        }
}


This is an example of the most basic type of command that you can add to the file and the only essential parts
The spacing is not important but it's pretty helpful. (I usually seperate everything with tabs)

Firstly, the name:

".test"
This is what needs to be typed in order for the command to be used in discord.

"type"
This is the type of command, depending on how you want the command to respond depends on what "type" it is.
So far there are 3 types:
"simple", "random" and "user"

For the "simple" command, there is only one response and is as basic as it can get

"response"
This is what the bot will reply with if the command is called


For this example, if a user were to type ".test", the bot would simply reply with "Hi there!"






{
    ".randomtest":
        {
            "type": "random",
            "response": [
                "This is a random output!",
                "This is another random output!",
                "This output is also random!"
                        ]
        }
}


This is an example of a random command. When the command is used, it will output a random response from the list.
The main differences between this one and the "simple" command type are:

"type": "random"
This signifies that the output type will be randomly chosen from a list

"response": []
This is a list that will contain all of the possible responses
All options must be separated with a comma and all of the options must be surrounded with ""


For this example, if a user were to type ".randomtest", the bot would choose a response from the three inside of the list






{
    ".userspecific":
        {
            "type": "user",
            "generic": "I don't know you...sorry",
            "userlist": [
                {
                    "name": "Bob",
                    "id": 111111111111111111,
                    "response": "Hey! I know who you are! You're Bob!"
                }
                ]
        }
}


This is an example of a user specific command. When the command is used, it will output a response based on the users ID.
This command is slightly more complex and has a few more sections than the other two:

"type": "user"
This signifies that the output type is user specific

"generic"
This is used as the reply if the users id is not inside of the list and can be considered as the "default" or "generic" response that the bot will do if it isn't sure what to say.
If you don't want the bot to reply with anything for people that aren't on the list, simply leave it as "generic": null

"userlist": []
This is a list of all of the users that have a custom response for this command.
In this example, "Bob" has the 18 digit id of 111111111111111111. If Bob were to use this command, he would get the response "Hey! I know who you are! You're Bob!"

"name" is unnecessary for the code but it is good practice to know who the bot is addressing

"id"
The user id of a discord user can be accessed by logging into discord and going into:
User Settings > Appearance > Advanced
And toggling the "Developer mode" to on

From here, you can rightclick any dicord user in a discord server and at the bottom should be a new option called "Copy ID"



The "user" type can be used for multiple users too, for example:


{
    ".userspecific":
        {
            "type": "user",
            "generic": "I don't know you...sorry",
            "userlist": [
                {
                    "name": "Bob",
                    "id": 111111111111111111,
                    "response": "Hey! I know who you are! You're Bob!"
                },
                {
                    "name": "Jimmy",
                    "id": 111111111111111112,
                    "response": "Oh, hi Jimmy!"
                }
                ]
        }
}

Will work for two users, Bob and Jimmy




=== Extra things: ===

"desc"
This is something that can be added to commands to give them a description that can be read by typing ".help2 commandname"

For example:


{
    ".test":
        {
            "desc": "This is a command that will tell the bot to say Hi to the user",
            "type": "simple",
            "response": "Hi there!"
        }
}

This is an example command from earlier with an added description
If a user were to type:

".help2 test"
The bot will respond with the description telling what the command does



"format"
This is similar to description that can be added if the command has any special formatting requirements

For example:


{
    ".present":
        {
            "format": ".present [GIFT IDEA]",
            "desc": "A command that tells the bot what present you would like",
            "type": "simple",
            "response": "Ok! I'll remember that you'd really like {message} for your birthday!"
        }
}

This is a new example where the user needs to input something for the command to work
If the user were to type:

".help2 present"
The bot will respond with how the command should be formatted along with the description (if there is one)



"error"
This is something that can be added if the command made can cause an error.
In the example for the "format", it is possible for the user to not include a message after the command, resulting in an error
By adding error, a custom error message will appear

For example:


{
    ".present":
        {
            "error": "I'm sorry but I don't know what to get you...Remember to tell me after .present!",
            "format": ".present [GIFT IDEA]",
            "desc": "A command that tells the bot what present you would like",
            "type": "simple",
            "response": "Ok! I'll remember that you'd really like {message} for your birthday!"
        }
}

This is a modified example of the ".present" command that will reply with the error message if an error is caused




"counter"
This can be added if you would like a custom stat counter for whenever this command is used. This will appear on the stats whenever ".stats" is used

For example:


{
    ".present":
        {
            "counter": "Presents remembered",
            "error": "I'm sorry but I don't know what to get you...Remember to tell me after .present!",
            "format": ".present [GIFT IDEA]",
            "desc": "A command that tells the bot what present you would like",
            "type": "simple",
            "response": "Ok! I'll remember that you'd really like {message} for your birthday!"
        }
}

This will add a new counter called "Presents remembered" to the bot usage stats and add 1 every time this command is used.
These stats can be seen with ".stats"




"admin"
This is a small check that will see if the user of the command on the server is an admin. If they are, they will be able to use the command.
If they are not, nothing will happen

For example:


{
    ".present":
        {
            "admin": true,
            "counter": "Presents remembered",
            "error": "I'm sorry but I don't know what to get you...Remember to tell me after .present!",
            "format": ".present [GIFT IDEA]",
            "desc": "A command that tells the bot what present you would like",
            "type": "simple",
            "response": "Ok! I'll remember that you'd really like {message} for your birthday!"
        }
}

Now only users that are admins can use this command





=== f-strings ===

If you want to make your commands extra fancy then feel free to use f-strings. A special string formatting used by python.
To make things as easy as possible, in your response you can include curly brackets {}.
You may have seen one example of this used in the ".present" commmand.

Inside of these, the program will substitute the contents for a variable.
For example, if you were to input {1 + 2}, the bot would simply say "3"

Some easy examples I have made for the bot are:

{user}         - Gives out the users name and unique 4 digit code   EG: Bob#1234
{user.name}    - Gives out the users name                           EG: Bob
{user.mention} - Will mention the user                              EG: @Bob
{message}      - Gives out the message after the command


For example:


{
    ".favcolour":
        {
            "type": "simple",
            "response": "Hi {user.mention}! Your favourite colour is {message}!",
            "error": "Oops, you forgot to tell me your favourite colour..."
        }
}

If a user called Bob entered ".favcolour blue"
The bot would reply with "Hi @Bob! Your favourite colour is blue!"

If the user simply entered ".favcolour" with nothing afterwards:
The bot would reply with "Oops, you forgot to tell me your favourite colour..."


The {message} will be as long as the user wants and can be multiple words
If you know your python then you can mess around with this a little bit
For example:


{
    ".firstinlist":
        {
            "type": "simple",
            "response": "The first item in the list is {message.split()[0]}",
            "error": "Nothing was entered"
        }
}

Would allow for a list separated by spaces and would only respond with the first item


{
    ".banthe6thletter":
        {
            "type": "simple",
            "response": "I have removed all traces of the sixth letter o' the alphabet in your message: {message.replace('f','')}",
            "error": "Nothing was entered"
        }
}

Would remove all 'f's in the message sent

If you're freaked out by this then don't worry, just stick with 4 at the top







You can also use line breakers, tabs and all those cool stuff in your text too
For example, to separate text by a line, use "\n"


{
    ".test":
        {
            "type": "simple",
            "response": "Hi there!\nI like your face!"
        }
}

This will come out as:

"Hi there!"
"I like your face!"




You can also use discord formatting too! If you want highlighted text, emojis or anything else then put it in the text!

For example:

{
    ".test":
        {
            "type": "simple",
            "response": "*Hey there* :smile:"
        }
}

This would put the text in italics and put a smiling emoji at the end
You can get pretty creative with this kind of thing







=== EXTRA NOTES ===

The order of items for each command does not matter

For example:


{
    ".present":
        {
            "admin": true,
            "counter": "Presents remembered",
            "error": "I'm sorry but I don't know what to get you...Remember to tell me after .present!",
            "format": ".present [GIFT IDEA]",
            "desc": "A command that tells the bot what present you would like",
            "type": "simple",
            "response": "Ok! I'll remember that you'd really like {message} for your birthday!"
        }
}

Will work just as well as:


{
    ".present":
        {
            "type": "simple",
            "desc": "A command that tells the bot what present you would like",
            "format": ".present [GIFT IDEA]",
            "response": "Ok! I'll remember that you'd really like {message} for your birthday!",
            "admin": true,
            "counter": "Presents remembered",
            "error": "I'm sorry but I don't know what to get you...Remember to tell me after .present!"
        }
}


Formatting:

All values MUST be separated with commas
You may have noticed that every single thing, if followed up by something that is not a curly bracket {} or a colon : has a comma at the end of it
Even if it's just multiple commands, use commas

For example:


{
    ".test":
        {
            "type": "simple",
            "response": "Hi there!"
        },
    ".goodbot":
        {
            "type": "random",
            "desc": "Informs the bot that they are, indeed, a good bot",
            "response": ["Thank you!","I try my best!"],
            "counter": "Good bot"
        }
}


The two commands are separated with a "," between them (at the end of } for the ".test")
There is no comma at the end of "Hi there!" as it is the end of ".test" and is followed with }


All none numerical values MUST be surrounded by ""

For example:


{
    ".userspecific":
        {
            "type": "user",
            "generic": "I don't know you...sorry",
            "userlist": [
                {
                    "name": "Bob",
                    "id": 111111111111111111,
                    "response": "Hey! I know who you are! You're Bob!"
                }
                ]
        }
}


You should notice that every value except for the id number is surrounded by ""
The id number should NOT be surrounded as it is not a string
(Think of a string as a fancy term meaning list of letters, basically anything with words in)